# -*- coding: utf-8 -*-
"""Капитал.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18c__HX667KU9ux1KfVQqh-l1-nD8GaWU
"""

import numpy as np

# === Параметры инвестирования ===
start_capital = 0                # Стартовый капитал (теперь 0)
years = 30                        # Количество лет инвестирования
annual_rate = 0.12                # Годовая ставка (например, 12% = 0.12)
monthly_rate = annual_rate / 12   # Ежемесячная ставка

# Генерация ежемесячных пополнений по диапазонам лет
monthly_contributions = []
for year in range(1, years + 1):
    if year <= 3:
        monthly_contributions.append(1_000_000)
    elif 4 <= year <= 6:
        monthly_contributions.append(1_000_000)
    elif 7 <= year <= 9:
        monthly_contributions.append(2_000_000)
    elif 10 <= year <= 12:
        monthly_contributions.append(2_500_000)
    elif 13 <= year <= 15:
        monthly_contributions.append(3_000_000)
    elif 16 <= year <= 18:
        monthly_contributions.append(4_000_000)
    elif 19 <= year <= 21:
        monthly_contributions.append(6_000_000)
    elif 22 <= year <= 24:
        monthly_contributions.append(9_000_000)
    elif 25 <= year <= 27:
        monthly_contributions.append(13_000_000)
    elif 28 <= year <= 30:
        monthly_contributions.append(16_000_000)

# === Функция для расчета капитала с задержкой на 3, 5, 7 лет ===
def calculate_capital_with_delay(start_year, contributions, rate):
    capital = 0
    capital_by_year_with_delay = []
    for year in range(start_year, years):
        yearly_contribution = contributions[year]  # Получаем ежегодное пополнение для этого года
        for month in range(12):
            capital += yearly_contribution  # добавляем ежемесячное пополнение
            capital *= (1 + rate)        # начисление процентов
        capital_by_year_with_delay.append(capital)
    return [0] * start_year + capital_by_year_with_delay

# Получаем историю капитала с задержкой на 3, 5 и 7 лет
capital_by_year_no_contrib_3_years = calculate_capital_with_delay(2, monthly_contributions, monthly_rate)
capital_by_year_no_contrib_5_years = calculate_capital_with_delay(5, monthly_contributions, monthly_rate)
capital_by_year_no_contrib_7_years = calculate_capital_with_delay(7, monthly_contributions, monthly_rate)


# === Расчет итогового капитала ===
capital = start_capital

# Для визуализации: отслеживание капитала, пополнений и прибыли по годам
capital_by_year = []
contributions_by_year = []
profit_by_year = []
total_contributions = 0

# Заполнение капитала с пополнениями
for year in range(years):
    yearly_contribution = 0
    capital_start = capital
    monthly_addition = monthly_contributions[year]
    for month in range(12):
        capital += monthly_addition          # пополнение вклада
        capital *= (1 + monthly_rate)        # начисление процентов
        yearly_contribution += monthly_addition
    total_contributions += yearly_contribution
    capital_by_year.append(capital)
    contributions_by_year.append(yearly_contribution)
    profit_by_year.append(capital - capital_start - yearly_contribution)

# === Визуализация ===
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

# График роста капитала по годам с диапазоном (1, years + 1)
plt.figure(figsize=(12, 6))
plt.plot(range(1, years + 1), capital_by_year, marker='o', label='С пополнениями')
plt.plot(range(1, years + 1), capital_by_year_no_contrib_3_years, marker='x', linestyle='--', label='Без пополнений (3 года)')
plt.plot(range(1, years + 1), capital_by_year_no_contrib_5_years, marker='x', linestyle='--', label='Без пополнений (5 лет)')
plt.plot(range(1, years + 1), capital_by_year_no_contrib_7_years, marker='x', linestyle='--', label='Без пополнений (7 лет)')
plt.title('Рост капитала по годам')
plt.xlabel('Год')
plt.ylabel('Капитал (руб)')
plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f'{x:,.0f}'))
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

# === Функция для расчета капитала по каждому году с учетом ежемесячного сложного процента ===
def calculate_yearly_contributions_with_interest(contributions, rate, years):
    yearly_contributions_with_interest = []

    for i in range(years):
        yearly_contribution_with_interest = 0
        # Ежегодное пополнение делим на 12, чтобы получить ежемесячное пополнение
        monthly_contribution = contributions[i] / 12
        # Для каждого месяца года считаем его будущую стоимость
        for month in range(12):
            # Приводим ежемесячное пополнение к будущей стоимости с учетом сложного процента
            # Месяцы начинают учитываться с конца периода
            future_value = monthly_contribution * (1 + rate)**(12 * (years - i) - month)
            yearly_contribution_with_interest += future_value

        # Записываем суммарную стоимость пополнений за год, приведенную к будущей стоимости
        yearly_contributions_with_interest.append(yearly_contribution_with_interest)

    return yearly_contributions_with_interest

# Получаем ежегодные пополнения с учетом ежемесячного сложного процента для каждого года
yearly_contributions_with_interest = calculate_yearly_contributions_with_interest(contributions_by_year, monthly_rate, years)

# Визуализация: Гистограмма ежегодных пополнений с учетом ежемесячного сложного процента
plt.figure(figsize=(12, 6))
plt.bar(range(1, years + 1), yearly_contributions_with_interest, color='orange')
plt.title('Ежегодные пополнения с учетом ежемесячного сложного процента (30 лет)')
plt.xlabel('Год')
plt.ylabel('Приведённые пополнения (руб) через 30 лет')
plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f'{x:,.0f}'))
plt.grid(True, axis='y')
plt.tight_layout()
plt.show()

# Круговая диаграмма по сумме пополнений по периодам с учетом сложного процента
labels = ['1-3', '4-6', '7-9', '10-12', '13-15', '16-18', '19-21', '22-24', '25-27', '28-30']
amounts = [
    sum(yearly_contributions_with_interest[0:3]),
    sum(yearly_contributions_with_interest[3:6]),
    sum(yearly_contributions_with_interest[6:9]),
    sum(yearly_contributions_with_interest[9:12]),
    sum(yearly_contributions_with_interest[12:15]),
    sum(yearly_contributions_with_interest[15:18]),
    sum(yearly_contributions_with_interest[18:21]),
    sum(yearly_contributions_with_interest[21:24]),
    sum(yearly_contributions_with_interest[24:27]),
    sum(yearly_contributions_with_interest[27:30])
]

plt.figure(figsize=(8, 8))
plt.pie(amounts, labels=labels, autopct='%1.1f%%', startangle=140)
plt.title('Распределение пополнений по периодам (с учетом сложного процента)')
plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f'{x:,.0f}'))
plt.legend()
plt.tight_layout()
plt.show()

# Анализ вклада пополнений
added_by_contributions = capital - capital_by_year_no_contrib_3_years[-1]
print(f"Разница с тем, если бы не инвестировать первые n лет: {added_by_contributions:,.2f} руб")

# Гистограмма ежегодной прибыли (рост капитала без учета пополнений)
plt.figure(figsize=(12, 6))
plt.bar(range(1, years + 1), profit_by_year, color='green')
plt.title('Начисленный процент по годам')
plt.xlabel('Год')
plt.ylabel('Прибыль (руб)')
plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f'{x:,.0f}'))
plt.grid(True, axis='y')
plt.tight_layout()
plt.show()

# График сравнения капитала и суммарных вложений
plt.figure(figsize=(12, 6))
plt.plot(range(1, years + 1), capital_by_year, label='Капитал с пополнениями')
plt.plot(range(1, years + 1), [start_capital + sum(contributions_by_year[:i+1]) for i in range(years)],
         label='Сумма вложений', linestyle='--')
plt.title('Сравнение капитала и вложений')
plt.xlabel('Год')
plt.ylabel('Рубли')
plt.legend()
plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f'{x:,.0f}'))
plt.grid(True)
plt.tight_layout()
plt.show()